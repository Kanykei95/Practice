FEB 8TH
PAGE OBJECT MODEL DESIGN PATTERN:
    --> The main idea behind POM design pattern is to create java classes for each page we have in the web application we are working.
    --> How to figure out if you are on a different page?
        - If the link is changing when you go to the page, it is considered as another page.
        - Therefore a new Pages class should be created to store web elements and methods that belongs to the class.
============================================
SYNCHRONIZATION:
    - Definition: Multiple things moving, operating at the same time.
    - In our case, we are synchronizing our WebDriver and browser.
    - Since our WebDriver goes faster than the browser, we need to apply different waits at different points in our program.
    - If the browser and WebDriver is not synchronized, we will get different types of exceptions depending on situation.
    Such as: NoSuchElementException, ElementNotInteractableException etc..
Dynamic Attributes  : is when the attribute value of the webelement is changing everytime when we refresh the page.
Dynamic WebElements : is when the state of the web element changes.
    --> some webelements are NOT visible on the page, and becomes visible after certain time.
    --> some webelements are visible on the page, and becomes invisible after certain time.
What can we do to synchronize our code?
1- Thread.sleep()
    Understanding Thread.sleep();
        --> this method has nothing to do with webdriver, browser, or selenium.
        --> Thread.sleep() method comes straight from Java.
        --> Thread.sleep() is basically like a pause button for our program flow. 
        --> It will stop the whole program flow for given duration without looking for ANY CONDITION AT ALL.
        --> It is not considered a good practice to use this in our code.
        --> We should avoid using it UNLESS WE HAVE TO.
         
2- Implicit Wait
    --> by default it is 0
    --> every time findElement or findElements methods are used, IF the webdriver cannot locate the WebElement, implicit wait will be triggered.
    --> we wet set it only once, and it will apply to that whole driver session
    To understand this method:
        findElement()
            --> takes a locator and looks for WebElement
            if WebElement found
                -> return WebElement
            if WebElement NOT found
                -> this will throw NoSuchElementException
        --> If you have already set implicit wait
            if WebElement NOT found
                -> triggers the implicit wait
                -> waits for the given time
                -> if found
                    returns WebElement
                -> if not
                    throws exception
3- Explicit Wait
    --> Explicit wait is applied using WebDriverWait classes object.
    --> WebDriverWait comes from Selenium.
    --> Using WebDriverWait, we can wait until: 
        ->element is visible 
        ->element is displayed
        ->element is invisible
        ->title to contain something
        ->attribute value to contain something
    --> This requires more preperation. Because we are setting up many different configurations;
        -> driver
        -> certain amount of time : wait.until() 
        -> certain action, certain occasion to happen: ExpectedConditions.
        -> certain webElement : .is visible
                                .is interactable
                                .is contains...
    SYNTAX:
        WebDriverWait wait = new WebDriverWait(driver, seconds);
        wait.until(ExpectedConditions.visibilityOf(webElement));
        -> this will be only applied once at the line that it is called.
==========================================
ACTIONS: 
-> Actions class comes from Selenium
-> Actions class allows us to do advanced mouse and keyboard actions.
-> such as: 
    -clickAndHold
    -dragAndDrop
    -moveToElement
    -contextClick (right click)
Syntax: 
    //1- Create the object of Actions class, and pass the driver instance into constructor
    Actions actions = new Actions(driver);
    //2- Use the actions instance to get the Actions class methods.
    actions.moveToElement()
    //3- After using the method we MUST use .perform() method at the end to make your driver do these actions.
        -> if you do not use .perform() it will not perform the methods used.
        
        ex#1 :actions.moveToElement().perform();
        
        ex#2 :actions.moveToElement();
                actions.perform();
 
    

